# -*- coding: utf-8 -*-
"""mobius_strip.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TLgbhQ0PHgKtFNf6Ou6Z_-OoX79dLLSK
"""

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D


class MobiusStrip:
    def __init__(self, R=1.0, w=0.3, n=200):
        """
        Initialize the Möbius strip.

        Parameters:
        R (float): Radius from center to the strip centerline
        w (float): Width of the strip
        n (int): Resolution of mesh (number of steps in u and v)
        """
        self.R = R
        self.w = w
        self.n = n
        self.u = np.linspace(0, 2 * np.pi, n)
        self.v = np.linspace(-w / 2, w / 2, n)
        self.U, self.V = np.meshgrid(self.u, self.v)
        self.X, self.Y, self.Z = self._generate_mesh()

    def _generate_mesh(self):
        """Compute (x, y, z) mesh using parametric equations."""
        U, V = self.U, self.V
        R = self.R

        X = (R + V * np.cos(U / 2)) * np.cos(U)
        Y = (R + V * np.cos(U / 2)) * np.sin(U)
        Z = V * np.sin(U / 2)

        return X, Y, Z

    def compute_surface_area(self):
        """Approximate surface area using numerical integration (trapezoidal rule)."""
        # Partial derivatives
        du = self.u[1] - self.u[0]
        dv = self.v[1] - self.v[0]

        Xu = np.gradient(self.X, axis=1) / du
        Yu = np.gradient(self.Y, axis=1) / du
        Zu = np.gradient(self.Z, axis=1) / du

        Xv = np.gradient(self.X, axis=0) / dv
        Yv = np.gradient(self.Y, axis=0) / dv
        Zv = np.gradient(self.Z, axis=0) / dv

        # Compute cross product of partial derivatives
        cross_prod = np.cross(
            np.stack((Xu, Yu, Zu), axis=-1),
            np.stack((Xv, Yv, Zv), axis=-1)
        )

        # Compute magnitude of cross product
        area_density = np.linalg.norm(cross_prod, axis=-1)

        # Integrate over the surface
        surface_area = np.sum(area_density) * du * dv
        return surface_area

    def compute_edge_length(self):
        """Compute length of the edge loop using numerical arc length."""
        edge_points = []
        for v_edge in [-self.w / 2, self.w / 2]:
            u = self.u
            x = (self.R + v_edge * np.cos(u / 2)) * np.cos(u)
            y = (self.R + v_edge * np.cos(u / 2)) * np.sin(u)
            z = v_edge * np.sin(u / 2)
            edge_points.append(np.stack((x, y, z), axis=-1))

        # Concatenate both edge loops and compute total edge length
        edge_curve = np.concatenate(edge_points, axis=0)
        diffs = np.diff(edge_curve, axis=0)
        segment_lengths = np.linalg.norm(diffs, axis=1)
        return np.sum(segment_lengths)

    def plot(self):
        """Render the Möbius strip in 3D."""
        fig = plt.figure(figsize=(10, 6))
        ax = fig.add_subplot(111, projection='3d')
        ax.plot_surface(self.X, self.Y, self.Z, cmap='viridis', edgecolor='none', alpha=0.9)
        ax.set_title("Mobius Strip")
        ax.set_xlabel("X")
        ax.set_ylabel("Y")
        ax.set_zlabel("Z")
        plt.tight_layout()
        plt.show()


if __name__ == "__main__":
    mobius = MobiusStrip(R=1.0, w=0.3, n=300)

    print(f"Surface Area ≈ {mobius.compute_surface_area():.4f}")
    print(f"Edge Length ≈ {mobius.compute_edge_length():.4f}")

    mobius.plot()
